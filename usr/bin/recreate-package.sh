#!/bin/bash

# Script to recreate a package from installed files
# Author: Tales A. MendonÃ§a (talesam@gmail.com)
# Translator: Assistant
# Version: 1.0.0
# Date: $(date +%Y-%m-%d)

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# Check if the user provided a package name
if [ -z "$1" ]; then
	echo -e "${RED}Error: No package name provided.${NC}"
	echo "Usage: $0 package_name"
	exit 1
fi

PACKAGE="$1"

# Temporary working directory
WORKDIR="$HOME/recreate_package_$PACKAGE"

# Directory to store recreated packages
OUTPUT_DIR="$HOME/recreated_packages"

PKGDIR="$WORKDIR/pkg"
FILE_LIST="$WORKDIR/file_list.txt"
RELATIVE_FILE_LIST="$WORKDIR/relative_file_list.txt"
PKGINFO="$PKGDIR/.PKGINFO"
MTREE="$PKGDIR/.MTREE"

echo -e "${YELLOW}Recreating package '$PACKAGE'...${NC}"

# Step 1: Check if the package is installed
if ! pacman -Q "$PACKAGE" &>/dev/null; then
	echo -e "${RED}Error: Package '$PACKAGE' is not installed on the system.${NC}"
	exit 1
fi

# Create working directory and output directory
mkdir -p "$PKGDIR"
mkdir -p "$OUTPUT_DIR"

# Step 2: List all files installed by the package
echo -e "${GREEN}Listing files installed by the package...${NC}"
pacman -Qlq "$PACKAGE" >"$FILE_LIST"
if [ $? -ne 0 ]; then
	echo -e "${RED}Error listing package files.${NC}"
	exit 1
fi

# Create list of files with relative paths
sed 's|^/||' "$FILE_LIST" >"$RELATIVE_FILE_LIST"

# Step 3: Copy files to the pkg directory using sudo
echo -e "${GREEN}Copying files to the packaging directory...${NC}"
TOTAL_SIZE=0
while IFS= read -r file; do
	if [ -f "/$file" ]; then
		dir=$(dirname "$file")
		sudo mkdir -p "$PKGDIR/$dir"
		sudo cp -a "/$file" "$PKGDIR/$dir/"
		FILE_SIZE=$(du -b "/$file" | cut -f1)
		TOTAL_SIZE=$((TOTAL_SIZE + FILE_SIZE))
		echo "Copied: /$file ($(numfmt --to=iec-i --suffix=B --format="%.2f" $FILE_SIZE))"
	elif [ -d "/$file" ]; then
		sudo mkdir -p "$PKGDIR/$file"
		echo "Created directory: /$file"
	fi
done <"$RELATIVE_FILE_LIST"

echo "Total size of copied files: $(numfmt --to=iec-i --suffix=B --format="%.2f" $TOTAL_SIZE)"

# Adjust permissions of copied files to the current user
sudo chown -R $(whoami):$(whoami) "$PKGDIR"

# Step 4: Create the .PKGINFO file
echo -e "${GREEN}Creating .PKGINFO file...${NC}"
# Use LANG=C to ensure pacman output is in English
PKGVER=$(LANG=C pacman -Qi "$PACKAGE" | grep "^Version" | awk '{print $3}')
PKGDESC=$(LANG=C pacman -Qi "$PACKAGE" | grep "^Description" | cut -d ':' -f2- | sed 's/^ //')
URL=$(LANG=C pacman -Qi "$PACKAGE" | grep "^URL" | awk '{print $3}')
LICENSE=$(LANG=C pacman -Qi "$PACKAGE" | grep "^Licenses" | cut -d ':' -f2- | sed 's/^ //')
ARCH=$(uname -m)
SIZE=$(du -bs "$PKGDIR" | cut -f1)
BUILDDATE=$(date +%s)
PACKAGER="$(whoami) <$(whoami)@$(hostname)>"
DEPENDS=$(LANG=C pacman -Qi "$PACKAGE" | grep "^Depends On" | cut -d ':' -f2- | sed 's/^ //' | sed 's/None//')

cat <<EOF >"$PKGINFO"
# Generated by recreate-package.sh v1.0.0
pkgname = $PACKAGE
pkgver = $PKGVER
pkgdesc = $PKGDESC
url = $URL
builddate = $BUILDDATE
packager = $PACKAGER
size = $SIZE
arch = $ARCH
license = $LICENSE
EOF

# Add dependencies
if [ -n "$DEPENDS" ]; then
	echo "$DEPENDS" | tr ' ' '\n' | while read -r depend; do
		if [ -n "$depend" ]; then
			echo "depend = $depend" >>"$PKGINFO"
		fi
	done
fi

# Step 5: Create the .MTREE file
echo -e "${GREEN}Creating .MTREE file...${NC}"
cd "$PKGDIR" || exit 1
LANG=C bsdtar -c --format=mtree \
	--options='!all,use-set,type,uid,gid,mode,time,size,md5,sha256,link' \
	. >"$MTREE"

if [ $? -ne 0 ]; then
	echo -e "${RED}Error creating .MTREE file.${NC}"
	exit 1
fi

# Generate date and time in the desired format
DATE=$(date +%y.%m.%d)
TIME=$(date +%H%M)

# Define the final package name with date, time, and architecture
FINAL_PACKAGE="${OUTPUT_DIR}/${PACKAGE}-${PKGVER}-${ARCH}.pkg.tar.zst"

# Step 6: Package the files using fakeroot
echo -e "${GREEN}Creating the package...${NC}"
cd "$PKGDIR" || exit 1
fakeroot -- env LANG=C bsdtar -c --zstd -f "$FINAL_PACKAGE" .PKGINFO .MTREE *

if [ $? -ne 0 ]; then
	echo -e "${RED}Error creating the package.${NC}"
	exit 1
fi

# Step 7: Generate the .md5 file
echo -e "${GREEN}Generating .md5 file...${NC}"
md5sum "$FINAL_PACKAGE" >"${FINAL_PACKAGE}.md5"
if [ $? -ne 0 ]; then
	echo -e "${RED}Error generating .md5 file.${NC}"
	exit 1
fi

# Step 8: Verify the created package
if [ -f "$FINAL_PACKAGE" ]; then
	echo -e "${GREEN}Package created successfully: ${FINAL_PACKAGE}${NC}"
	echo -e "${GREEN}.md5 file created: ${FINAL_PACKAGE}.md5${NC}"
	echo -e "${YELLOW}To install the package, run:${NC}"
	echo "sudo pacman -U $FINAL_PACKAGE"

	# Show the size of the created package
	PACKAGE_SIZE=$(du -h "$FINAL_PACKAGE" | cut -f1)
	echo -e "${GREEN}Size of created package: ${PACKAGE_SIZE}${NC}"
else
	echo -e "${RED}Error: Package was not created.${NC}"
	exit 1
fi

# Clean up temporary files (optional)
read -p "Do you want to remove temporary files? [y/N]: " RESPONSE
if [[ "$RESPONSE" =~ ^([yY])$ ]]; then
	sudo rm -rf "$WORKDIR"
	echo -e "${GREEN}Temporary files removed.${NC}"
else
	echo -e "${YELLOW}Temporary files kept in $WORKDIR.${NC}"
fi

exit 0
