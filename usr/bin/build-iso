#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166,SC2317,SC2155,SC2034,SC2229,SC2076,SC2199,SC2015
#
#  build-iso - Wrapper buildiso para construção de ISO
#  Created: ter 10 set 2024 11:02:02 -04
#  Altered: dom 01 dez 2024 10:12:36 -04
#
#  Copyright (c) 2024-2024, Tales A. Mendonça <talesam@gmail.com>
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
# system
declare APP="${0##*/}"
declare APPDESC="Wrapper buildiso para construção de ISO"
declare VERSION="1.2.6" # Versão do script
: "${reset=$(tput sgr0)}"
: "${red=$(tput bold)$(tput setaf 196)}"
LIBRARY=${LIBRARY:-"/usr/share/community/gitrepo/shell"}
[[ -s "$LIBRARY/gitlib.sh" ]] && source "$LIBRARY"/gitlib.sh || {
	echo "${red}=> ERRO FATAL: Não foi possível ler a biblioteca $LIBRARY/gitlib.sh ${reset}"
	exit 1
}
declare -aG bigcommunity_edition=(cinnamon cosmic deepin gnome kde xfce wmaker)
declare -aG biglinux_edition=(base FalaQueEuTeEscuto flisol kde small xivastudio)
declare -aG chililinux_edition=(base cinnamon cosmic deepin gnome i3 kde xfce wmaker)
declare -aG manjaro_edition=(architect bladebook gnome gnome-next grub kde kde-dev netinstall nxd xfce)
declare -aG talesam_edition=(cinnamon cosmic deepin gnome kde xfce wmaker)
declare -aG vcatafesta_edition=(base cinnamon cosmic deepin gnome i3 kde xfce wmaker)
#
declare -AG Aorganization=([bigcommunity]='communitybig' [biglinux]='biglinux' [chililinux]='chililinux' [manjaro]='communitybig' [talesam]='talesam' [vcatafesta]='vcatafesta')
declare -aG aOrganization=('bigcommunity' 'biglinux' 'chililinux' 'talesam' 'vcatafesta' 'Sair')
declare -aG aDistros=('bigcommunity' 'biglinux' 'chililinux' 'manjaro' 'Voltar')
declare -aG aBranchs=('stable' 'testing' 'unstable' 'voltar')
declare -aG aKernels=('latest' 'lts' 'oldlts' 'xanmod' 'Voltar')
declare -aG aProfiles=(
		'https://github.com/communitybig/iso-profiles'
		'https://github.com/biglinux/iso-profiles'
		'https://github.com/chililinux/iso-profiles'
		'https://github.com/chililinux/manjaro-iso-profiles'
		'https://gitlab.manjaro.org/profiles-and-settings/iso-profiles.git'
		'https://github.com/talesam/iso-profiles'
		'https://github.com/vcatafesta/iso-profiles'
		'Voltar'
)
declare -AG ApiProfiles=(
  # GitHub Repositories
  [https://github.com/communitybig/iso-profiles]='https://api.github.com/repos/communitybig/iso-profiles/contents/'
  [https://github.com/biglinux/iso-profiles]='https://api.github.com/repos/biglinux/iso-profiles/contents/'
  [https://github.com/chililinux/iso-profiles]='https://api.github.com/repos/chililinux/iso-profiles/contents/'
  [https://github.com/chililinux/manjaro-iso-profiles]='https://api.github.com/repos/chililinux/manjaro-iso-profiles/contents/'
  [https://github.com/talesam/iso-profiles]='https://api.github.com/repos/talesam/iso-profiles/contents/'
  [https://github.com/vcatafesta/iso-profiles]='https://api.github.com/repos/vcatafesta/iso-profiles/contents/'
  # GitLab Repositories
  [https://gitlab.manjaro.org/profiles-and-settings/iso-profiles.git]='https://gitlab.manjaro.org/api/v4/projects/profiles-and-settings%2Fiso-profiles/repository/tree'
)
declare -aG bigcommunity_build_list=(bigcommunity)
declare -aG biglinux_build_list=(biglinux biglinux-make-iso-profiles)
declare -aG chililinux_build_list=(chililinux)
declare -aG manjaro_build_list=(community manjaro oem)
declare -aG talesam_build_list=(bigcommunity)
declare -aG vcatafesta_build_list=(chililinux)
#
declare -g ORGANIZATION='communitybig'
declare -g DISTRONAME='bigcommunity'
declare -g EDITION='xfce'
declare -g KERNEL='lts'
declare -g TMATE='Não'

# Função para exibir informações de ajuda
sh_usage() {
	cat <<-EOF
		    ${reset}${APP} v${VERSION} - ${APPDESC}${reset}
		    ${red}Uso: ${reset}$APP ${cyan}[opções]${reset}

		    ${cyan}Opções:${reset}
		    -o|--org|--organization ${orange}<name> ${cyan} # Configura organização de trabalho no Github ${yellow}(default: communitybig)${reset}
		    -a|--auto|--automatic          ${cyan} # Modo automatico ${yellow}(default: communitybig) ${reset}
		    -V|--version                   ${cyan} # Imprime a versão do aplicativo ${reset}
		    -h|--help                      ${cyan} # Mostra este Help ${reset}
	EOF
}

sh_version() {
	cat <<-EOF
		${BOLD}${CYAN}${0##*/} v${VERSION}${RESET}
		${APPDESC}
		${BOLD}${black}Copyright (C) 2024-2024 ${reset}BigCommunity Team${black}

		  Este é um software livre: você é livre para alterá-lo e redistribuí-lo.
		  O $APP é disponibilizado para você sob a ${yellow}Licença MIT${black}, e
		  inclui software de código aberto sob uma variedade de outras licenças.
		  Você pode ler instruções sobre como baixar e criar para você mesmo
		  o código fonte específico usado para criar esta cópia.
		  ${red}Este programa vem com absolutamente NENHUMA garantia.
		  ${RESET}
	EOF
}

# Função para disparar o workflow
trigger_workflow() {
	local tmp_branch='stable'
	case "$DISTRONAME" in
	bigcommunity) tmp_branch="$BIGCOMMUNITY_BRANCH" ;;
	biglinux) tmp_branch="$BIGLINUX_BRANCH" ;;
	chililinux) tmp_branch="$CHILILINUX_BRANCH" ;;
	manjaro) tmp_branch="$MANJARO_BRANCH" ;;
	esac
	local current_datetime="$TAG"
	local event_type="ISO-${DISTRONAME}_${tmp_branch^^}_${EDITION,,}_${current_datetime}"
	local tmate_option=$([ "$TMATE" == "Sim" ] && echo "true" || echo "false")
	local data="{\"event_type\": \"$event_type\", \
  \"client_payload\": { \
    \"distroname\": \"$DISTRONAME\", \
    \"iso_profiles_repo\": \"$ISO_PROFILES_REPO\", \
    \"build_dir\": \"$BUILD_DIR\", \
    \"edition\": \"$EDITION\", \
    \"manjaro_branch\": \"$MANJARO_BRANCH\", \
    \"community_branch\": \"$BIGCOMMUNITY_BRANCH\", \
    \"biglinux_branch\": \"$BIGLINUX_BRANCH\", \
    \"chililinux_branch\": \"$CHILILINUX_BRANCH\", \
    \"kernel\": \"$KERNEL\", \
    \"tmate\": $tmate_option \
  }}"

	p_log "${CYAN}" "Disparando workflow para $event_type${NC}"
	response=$(curl -s -X POST \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Authorization: token $TOKEN_RELEASE" \
		--data "$data" \
		-w "%{http_code}" \
		-o /dev/null \
		"https://api.github.com/repos/${REPO_WORKFLOW}/dispatches")

	if [ "$response" == "422" ]; then
		die "${red}" "Erro $response ao acionar o workflow. Não pode ter mais de 10 entradas no evento ${reset}"
	fi

	if [ "$response" != "204" ]; then
		die "${red}" "Erro ao acionar o workflow. Código de resposta: $response${reset}"
	fi

	p_log "${GREEN}" "Workflow de build da ISO $event_type acionado com sucesso.${NC}"
	p_log "${YELLOW}" "Por favor, verifique a aba 'Actions' no GitHub para acompanhar o progresso do build.${NC}"
	if [ "$TMATE" == "sim" ]; then
		p_log "${YELLOW}" "A sessão TMATE será ativada. Fique atento às informações de conexão nos logs do GitHub Actions.${NC}"
	fi
	p_log "$orange" "Aguardando '3s' para a API acionar a Action e podermos pegar o 'id'."
	sleep 3
	p_log "$RESET" "$(get_url_actions)"

	checkout_and_exit 0
}

resume_and_build() {
	# Confirmar as escolhas
	clear
	echo "${black}$(replicate '=')${reset}"
	echo -e "${cyan}Resumo das escolhas:${reset}"
	echo "${black}$(replicate '=')${reset}"
	echo "Organization     : ${orange}$ORGANIZATION ${reset}"
	echo "Repo Workflow    : ${orange}$REPO_WORKFLOW ${reset}"
	echo "User Name        : ${orange}$GITHUB_USER_NAME ${reset}"
	echo "Distroname       : ${orange}$DISTRONAME ${reset}"
	echo "Iso Profiles repo: ${orange}$ISO_PROFILES_REPO ${reset}"
	echo "Build dir        : ${orange}$BUILD_DIR ${reset}"
	echo "Edition          : ${orange}$EDITION ${reset}"
	echo "Manjaro Branch   : ${orange}$MANJARO_BRANCH ${reset}"
	echo "Community Branch : ${orange}$BIGCOMMUNITY_BRANCH ${reset}"
	echo "BigLinux Branch  : ${orange}$BIGLINUX_BRANCH ${reset}"
	echo "ChiliLinux Branch: ${orange}$CHILILINUX_BRANCH ${reset}"
	echo "Kernel           : ${orange}$KERNEL ${reset}"
	echo "Release Tag      : ${orange}$TAG ${reset}"
	echo "TMATE Debug      : ${orange}$TMATE ${reset}"
	echo "${black}$(replicate '=')${reset}"

	if conf "${YELLOW}Deseja prosseguir com a construção da ISO?"; then
		trigger_workflow
	else
		die "${RED}" "Construção da ISO cancelada."
	fi
}

sh_set_organization() {
  local xvalue_organization="$1"
  REPO_WORKFLOW="${Aorganization[$xvalue_organization]}/build-iso"  # Repositório que contém os workflows
  ORGANIZATION="${REPO_WORKFLOW%%/*}"                               # default communitybig
}

get_organization() {
  create_menu_with_array "Escolha a ${yellow}organization${reset} no GITHUB:" aOrganization[@] "$ORGANIZATION"
	ORGANIZATION="${MENU_RESULT}"
	DISTRONAME="${MENU_RESULT}"
  sh_set_organization "$ORGANIZATION"
}

get_distroname() {
  create_menu_with_array "Escolha a ${yellow}distribuição${reset}:" aDistros[@] "$DISTRONAME"
	DISTRONAME="${MENU_RESULT}"
  #sh_set_organization "$DISTRONAME"
}

get_iso_profiles_repo() {
  # Gerando a URL padrão com base no valor de $DISTRONAME
  local default_url="https://github.com/$DISTRONAME/iso-profiles"
	create_menu_with_array 'Escolha o repositório iso-profiles:' aProfiles[@] "$default_url"
	ISO_PROFILES_REPO="${MENU_RESULT}"
}

get_build_list() {
  local repo="$1"
  local api_url="${ApiProfiles[$repo]}"

  # Verifica se o repositório existe no array
  if [[ -z "$api_url" ]]; then
    die "${red}" "Erro: Repositório não encontrado no array: $repo ${reset}"
  fi

  # Faz a requisição e inspeciona a resposta para entender o formato
	p_log "${cyan}" "Fazendo requisição na API $api_url ${reset}"
  local response=$(curl -sL "$api_url")
  sleep 1

  # Verifica se a resposta está vazia ou se ocorreu um erro 404
  if [[ -z "$response" || "$response" == *"404 Not Found"* ]]; then
    die "${red}" "Erro: Repositório não encontrado ou erro ao acessar a URL: $repo ${reset}"
  fi

  # Se o repositório for do GitHub, a estrutura de resposta é diferente
  if [[ "$api_url" == *"github"* ]]; then
    # Processa a resposta para GitHub
    mapfile -t build_list < <(
      echo "$response" | \
      jq -r '.[] | select(.type == "dir") | .name' | \
      grep -vE '^(shared|grub|temp_repo|.github)$'
    )
  else
    # Processa a resposta para GitLab
    mapfile -t build_list < <(
      echo "$response" | \
      jq -r '.[] | select(.type == "tree") | .name' | \
      grep -vE '^(shared|grub|temp_repo|.github)$'
    )
  fi

  # Retorna o array
  #echo "${build_list[@]}"
	build_list+=("Voltar")
	create_menu_with_array "Escolha uma ${yellow}BUILD_LIST${reset} para o ${yellow}${DISTRONAME}${reset}:" build_list[@] "$DISTRONAME"
	BUILD_DIR="${MENU_RESULT}"
}

get_edition() {
  local repo="$1"
  local dir="$2"
  local api_url="${ApiProfiles[$repo]}"
  local response

  # Verifica se o repositório existe no array
  if [[ -z "$api_url" ]]; then
    die "${red}" "Erro: Repositório não encontrado no array: $repo ${reset}"
  fi

  # Se for GitHub, faz a requisição
  if [[ "$api_url" == *"github"* ]]; then
    # Faz a requisição para o GitHub
    p_log "${CYAN}" "Fazendo requisição na API $api_url {NC}"
    response=$(curl -sL "${api_url}${dir}")
    sleep 1

    # Verifica se a resposta está vazia ou se ocorreu erro
    if [[ -z "$response" || "$response" == *"404 Not Found"* ]]; then
      die "${red}" "Erro: Problema ao acessar o diretório: $dir ${reset}"
    fi

    # Processamento para GitHub
    mapfile -t subdirs < <(
      echo "$response" | \
      jq -r '.[] | select(.type == "dir") | .name'
    )
  elif [[ "$api_url" == *"gitlab"* ]]; then
    # Faz a requisição para o GitLab com o parâmetro 'path'
    p_log "${CYAN}" "Fazendo requisição na API $api_url {NC}"
    response=$(curl -sL "${api_url}?path=${dir}")
    sleep 1

    # Verifica se a resposta está vazia ou se ocorreu erro
    if [[ -z "$response" || "$response" == *"404 Not Found"* ]]; then
      die "${red}" "Erro: Problema ao acessar o repositório: $repo ${reset}"
    fi

    # Processamento para GitLab
    # Filtra os diretórios e pega o nome de cada um, excluindo os indesejados
    mapfile -t subdirs < <(
      echo "$response" | \
      jq -r '.[] | select(.type == "tree") | .name' | \
      grep -vE '^(shared|grub|temp_repo|.github)$'
    )
  else
    die "${red}" "Erro: Repositório desconhecido ${reset}"
  fi

  # Adiciona a opção "Voltar"
  subdirs+=("Voltar")

  # Cria o menu com as edições encontradas
  create_menu_with_array "Escolha uma ${yellow}EDIÇÃO/DE${reset} para o ${yellow}${DISTRONAME}${reset}:" subdirs[@] "$EDITION"
  EDITION="${MENU_RESULT}"
}

# Função para obter a edição, usada com menu_create com parametros via string e por array
get_edition_string() {
  # Determina o array com base na distribuição
  local editions_var="${DISTRONAME}_edition"
  local -n editions="${editions_var}" # Referência ao array correspondente

  # Adiciona a opção "Voltar" ao menu
  #editions+=("Voltar")

  # Cria o menu dinamicamente com as opções do array
  create_menu \
    "Escolha uma ${yellow}EDIÇÃO/DE${reset} para o ${yellow}${DISTRONAME}${reset}:" \
    "${editions[@]}" \
    'Voltar'

  # Define a edição escolhida
  EDITION="${MENU_RESULT}"
}

get_editionOLD() {
	local editions_var="${DISTRONAME}_edition"
# local editions=(${!editions_var[@]})

  # Usando eval para acessar o conteúdo do array dinamicamente
  eval "local editions=(\"\${${editions_var}[@]}\")"
	editions+=("Voltar")
	create_menu_with_array "Escolha uma ${yellow}EDIÇÃO/DE${reset} para o ${yellow}${DISTRONAME}${reset}:" editions[@] "$EDITION"
	EDITION="${MENU_RESULT}"
}

get_manjaro_branch() {
  create_menu_with_array "Escolha uma opcao para ${yellow}BRANCH${reset} do ${yellow}Manjaro${reset}:" aBranchs[@] 'stable'
  MANJARO_BRANCH="${MENU_RESULT}"
}

get_biglinux_branch() {
  create_menu_with_array "Escolha uma opcao para ${yellow}BRANCH${reset} do ${yellow}BigLinux${reset}:" aBranchs[@] 'stable'
  BIGLINUX_BRANCH="${MENU_RESULT}"
}

get_bigcommunity_branch() {
	create_menu_with_array "Escolha uma opcao para ${yellow}BRANCH${reset} do ${yellow}BigCommunity${reset}:" aBranchs[@] 'stable'
  BIGCOMMUNITY_BRANCH="${MENU_RESULT}"
}

get_chililinux_branch() {
  create_menu_with_array "Escolha uma opcao para ${yellow}BRANCH${reset} do ${yellow}ChiliLinux${reset}:" aBranchs[@] 'stable'
  CHILILINUX_BRANCH="${MENU_RESULT}"
}

get_kernel() {
	create_menu_with_array "Escolha a versão do ${yellow}KERNEL${reset}:" aKernels[@] "$KERNEL"
	KERNEL="${MENU_RESULT}"
}

get_debug() {
  local -a aDebug=('Não' 'Sim' 'Voltar')
	create_menu_with_array "Ativar sessão debug TMATE?" aDebug[@] "$TMATE"
  DEBUG="${MENU_RESULT}"
  TMATE="${MENU_RESULT}"
}

parse_parameters() {
	local param_organization
	local value_organization
	local param_organization_was_supplied=false
	local param_commit_was_supplied=false
	local param_build_was_supplied=false
	local param_aur_was_supplied=false

	while [[ $# -gt 0 ]]; do
		case $1 in
		-a | --auto | --automatic)
			IS_AUTO=true
			shift # past argument
			;;
		-n | --nocolor)
			unset_varcolors
			shift # past argument
			;;
		-o | --org | --organization)
			param_organization="$1"
			value_organization="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_org "$value_organization"
			param_organization_was_supplied=true
			shift # past value
			;;
		-c | --commit)
			param_commit="$1"
			value_commit="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_commit "$value_commit"
			param_commit_was_supplied=true
			shift # past argument
			shift # past value
			;;
		-b | --build)
			param_build="$1"
			value_build="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_build "$value_build"
			param_build_was_supplied=true
			shift # past argument
			shift # past value
			;;
		*)
			shift # unknown option
			;;
		esac
	done

	if $param_organization_was_supplied; then
    sh_set_organization "$value_organization"
	fi
	get_token_release # Obtem o TOKEN_RELEASE utilizando a função get_token_release
	check_valid_token
}

sh_configure_environment() {
	#debug
	export PS4='${RED}${0##*/}${GREEN}[$FUNCNAME]${PURPLE}[$LINENO]${RESET}'
	#set -x
	#set -e

  #sh_set_organization "$ORGANIZATION"

	#declare -g REPO_WORKFLOW="communitybig/build-iso"  # Repositório que contém os workflows
	#declare -g ORGANIZATION="${REPO_WORKFLOW%%/*}"     # communitybig
	declare -g CFILETOKEN="$HOME/.GITHUB_TOKEN"         # path do arquivo que contem os tokens do github

	declare -g REPO_NAME="$(get_repo_name)"             # Obtém o nome do repositório utilizando a função get_repo_name
	declare -g REPO_PATH="$(get_repo_root_path)"        # Obtém o caminho raiz do repositório utilizando a função get_repo_root_path

	# Define o diretório de log, armazenando os logs temporários do repositório
	declare -g LOG_DIR="/tmp/${APP}/${REPO_NAME}"
	declare -g LOG_FILE="${LOG_DIR}/${APP}.log"
	[[ ! -d "$LOG_DIR" ]] && mkdir -p "$LOG_DIR"

	p_log "$BLUE" "Configurando ambiente"
	declare -g IS_GIT_REPO=false
	declare -g IS_BUILD_ISO=true
	declare -g IS_AUR_PACKAGE=false

	checkDependencies
	parse_parameters "$@"
}

main() {
	IS_AUTO=false
	nocolor=false
	set_varcolors
	# Loop através de todos os parâmetros ($@)
	for arg in "$@"; do
		if [[ "$arg" = @(-n|--nocolor) ]]; then
			nocolor=true
			[[ "$nocolor" == "true" ]] && unset_varcolors || set_varcolors
		elif [[ "$arg" = @(-V|--version) ]]; then
			sh_version
			exit $(($# ? 0 : 1))
		elif [[ "$arg" = @(-h|--help) ]]; then
			sh_usage
			exit $(($# ? 0 : 1))
		elif [[ "$arg" = @(-a|--auto|--automatic) ]]; then
			IS_AUTO=true
			sh_configure_environment "$@"
			if [[ "$ORGANIZATION" =~ ^(chililinux)$ ]]; then
				DISTRONAME=chililinux
				ISO_PROFILES_REPO='https://github.com/chililinux/iso-profiles'
				MANJARO_BRANCH=stable
				BIGCOMMUNITY_BRANCH=
				BIGLINUX_BRANCH=stable
				CHILILINUX_BRANCH=stable
				KERNEL=lts
				BUILD_DIR=chililinux
				EDITION=base
				TAG=$(date "+%Y-%m-%d_%H-%M")
				TMATE='Sim'
			elif [[ "$ORGANIZATION" =~ ^(vcatafesta)$ ]]; then
				DISTRONAME=chililinux
				ISO_PROFILES_REPO='https://github.com/vcatafesta/iso-profiles'
				MANJARO_BRANCH=stable
				BIGCOMMUNITY_BRANCH=
				BIGLINUX_BRANCH=stable
				CHILILINUX_BRANCH=stable
				KERNEL=lts
				BUILD_DIR=chililinux
				EDITION=xfce
				TAG=$(date "+%Y-%m-%d_%H-%M")
				TMATE='Sim'
			elif [[ "$ORGANIZATION" =~ ^(manjaro)$ ]]; then
				DISTRONAME=manjaro
				ISO_PROFILES_REPO='https://gitlab.manjaro.org/profiles-and-settings/iso-profiles.git'
				MANJARO_BRANCH=stable
				BIGCOMMUNITY_BRANCH=
				BIGLINUX_BRANCH=
				CHILILINUX_BRANCH=
				KERNEL=latest
				BUILD_DIR=manjaro
				EDITION=xfce
				TAG=$(date "+%Y-%m-%d_%H-%M")
				TMATE='Sim'
			elif [[ "$ORGANIZATION" =~ ^(biglinux)$ ]]; then
				DISTRONAME=biglinux
				ISO_PROFILES_REPO='https://github.com/biglinux/iso-profiles'
				MANJARO_BRANCH=stable
				BIGCOMMUNITY_BRANCH=
				BIGLINUX_BRANCH=stable
				CHILILINUX_BRANCH=
				KERNEL=latest
				BUILD_DIR=biglinux
				EDITION=xfce
				TAG=$(date "+%Y-%m-%d_%H-%M")
				TMATE='Sim'
			elif [[ "$ORGANIZATION" =~ ^(communitybig|talesam)$ ]]; then
				DISTRONAME=bigcommunity
				ISO_PROFILES_REPO='https://github.com/communitybig/iso-profiles'
				MANJARO_BRANCH=stable
				BIGCOMMUNITY_BRANCH=stable
				BIGLINUX_BRANCH=stable
				CHILILINUX_BRANCH=
				KERNEL=latest
				BUILD_DIR=bigcommunity
				EDITION=xfce
				TAG=$(date "+%Y-%m-%d_%H-%M")
				TMATE='Sim'
			fi
		fi
	done

	sh_configure_environment "$@"
	p_log "${BLUE}" "${BOLD}Construção de ISO BigCommunity (versão $VERSION)${NC}\n"

	if $IS_AUTO; then
		resume_and_build
	else
		IS_BUILD_ISO_RESUME=true
		#REPO_PATH="$PWD"
		#HOME_FOLDER="/home/$USERNAME"

		while true; do
			get_organization
			# Verifica se a opção selecionada foi "Sair"
			if [[ $MENU_RESULT == "Sair" ]]; then
				die "${red}" "Construção da ISO cancelada.${reset}"
			fi

			get_distroname
			# Verifica se a opção selecionada foi "Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
			  continue
			fi

			get_iso_profiles_repo
			# Verifica se a opção selecionada foi "Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
				continue
			fi

			get_build_list "$ISO_PROFILES_REPO"
			# Verifica se a opção selecionada foi "Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
				continue
			fi

      get_edition "$ISO_PROFILES_REPO" "$BUILD_DIR"
			# Verifica se a opção selecionada foi "Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
				continue
			fi

			get_manjaro_branch
			# Verifica se a opção selecionada foi "Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
				continue
			fi

			if [[ "$DISTRONAME" =~ ^(manjaro)$ ]]; then
				BIGCOMMUNITY_BRANCH=
				BIGLINUX_BRANCH=
				CHILILINUX_BRANCH=
			else
				get_biglinux_branch
				# Verifica se a opção selecionada foi "Voltar"
				if [[ $MENU_RESULT == "Voltar" ]]; then
					continue
				fi
			fi

			if [[ "$DISTRONAME" =~ ^(manjaro|biglinux|chililinux)$ ]]; then
				BIGCOMMUNITY_BRANCH=
			else
				get_bigcommunity_branch
				# Verifica se a opção selecionada foi "Voltar"
				if [[ $MENU_RESULT == "Voltar" ]]; then
					continue
				fi
			fi

			if [[ "$DISTRONAME" =~ ^(manjaro|biglinux|bigcommunity)$ ]]; then
				CHILILINUX_BRANCH=
			else
				get_chililinux_branch
				# Verifica se a opção selecionada foi "Voltar"
				if [[ $MENU_RESULT == "Voltar" ]]; then
					continue
				fi
			fi

			get_kernel
			# Verifica se a opção selecionada foi "Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
				continue
			fi

			get_debug
			# Verifica se a opção selecionada foi "Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
				continue
			fi

			TAG=$(date "+%Y-%m-%d_%H-%M")
			resume_and_build
		done
	fi
}

main "$@"
