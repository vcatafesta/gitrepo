#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166,SC2317,SC2155,SC2034,SC2229,SC2076,SC2199,SC2015
#
#  build-iso - Wrapper git para o BigCommunity
#  Created: ter 10 set 2024 11:02:02 -04
#  Altered: ter 01 out 2024 23:28:12 -04
#
#  Copyright (c) 2024-2024, Tales A. Mendonça <talesam@gmail.com>
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
# system
declare APP="${0##*/}"
declare APPDESC="Wrapper para construção de ISO BigCommunity"
declare VERSION="1.2.3" # Versão do script
: "${reset=$(tput sgr0)}"
: "${red=$(tput bold)$(tput setaf 196)}"
LIBRARY=${LIBRARY:-"/usr/share/community/gitrepo/shell"}
[[ -s "$LIBRARY/gitlib.sh" ]] && source "$LIBRARY"/gitlib.sh || {
	echo "${red}=> ERRO FATAL: Não foi possível ler a biblioteca $LIBRARY/gitlib.sh ${reset}"
	exit 1
}

# Função para exibir informações de ajuda
sh_usage() {
	cat <<-EOF
		    ${reset}${APP} v${VERSION} - ${APPDESC}${reset}
		    ${red}Uso: ${reset}$APP ${cyan}[opções]${reset}

		        ${cyan}Opções:${reset}
		          -o|--org|--organization ${orange}<name> ${cyan} # Configura organização de trabalho no Github ${yellow}(default: talesam)${reset}
		          -n|--nocolor                   ${cyan} # Suprime a impressão de cores ${reset}
		          -V|--version                   ${cyan} # Imprime a versão do aplicativo ${reset}
		          -h|--help                      ${cyan} # Mostra este Help ${reset}
	EOF
}

parse_parameters() {
	local param_organization
	local value_organization
	local param_organization_was_supplied=false
	local param_commit_was_supplied=false
	local param_build_was_supplied=false
	local param_aur_was_supplied=false

	while [[ $# -gt 0 ]]; do
		case $1 in
		-n | --nocolor)
			unset_varcolors
			shift # past argument
			;;
		-o | --org | --organization)
			param_organization="$1"
			value_organization="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_org "$value_organization"
			param_organization_was_supplied=true
			shift # past value
			;;
		-c | --commit)
			param_commit="$1"
			value_commit="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_commit "$value_commit"
			param_commit_was_supplied=true
			shift # past argument
			shift # past value
			;;
		-b | --build)
			param_build="$1"
			value_build="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_build "$value_build"
			param_build_was_supplied=true
			shift # past argument
			shift # past value
			;;
		*)
			shift # unknown option
			;;
		esac
	done

	if $param_organization_was_supplied; then
		REPO="${value_organization}/build-iso" # Repositório que contém os workflows
		ORGANIZATION="${REPO%%/*}"             # communitybig
	fi
	get_token_release # Obtem o TOKEN_RELEASE utilizando a função get_token_release
	check_valid_token
}

sh_configure_environment() {
	#debug
	export PS4='${RED}${0##*/}${GREEN}[$FUNCNAME]${PURPLE}[$LINENO]${RESET}'
	#set -x
	#set -e

	declare -g REPO="talesam/build-iso"         # Repositório que contém os workflows
	declare -g ORGANIZATION="${REPO%%/*}"       # talesam
	declare -g CFILETOKEN="$HOME/.GITHUB_TOKEN" # path do arquivo que contem os tokens do github

	declare -g REPO_NAME="$(get_repo_name)"      # Obtém o nome do repositório utilizando a função get_repo_name
	declare -g REPO_PATH="$(get_repo_root_path)" # Obtém o caminho raiz do repositório utilizando a função get_repo_root_path

	# Define o diretório de log, armazenando os logs temporários do repositório
	declare -g LOG_DIR="/tmp/${APP}/${REPO_NAME}"
	declare -g LOG_FILE="${LOG_DIR}/${APP}.log"
	[[ ! -d "$LOG_DIR" ]] && mkdir -p "$LOG_DIR"

	p_log "$BLUE" "Configurando ambiente"
	declare -g IS_GIT_REPO=false
	declare -g IS_BUILD_ISO=true
	declare -g IS_AUR_PACKAGE=false

	checkDependencies
	parse_parameters "$@"
}

# Função para disparar o workflow
trigger_workflow() {
	local current_datetime="$TAG"
	local event_type="ISO-${EDITION^^}"
	local tmate_option=$([ "$TMATE" == "sim" ] && echo "true" || echo "false")
	#local data="{\"event_type\": \"$event_type\", \"client_payload\": { \"edition\": \"$EDITION\", \"manjaro_branch\": \"$MANJARO_BRANCH\", \"community_branch\": \"$COMMUNITY_BRANCH\", \"biglinux_branch\": \"$BIGLINUX_BRANCH\", \"kernel\": \"$KERNEL\", \"release_tag\": \"$current_datetime\", \"tmate\": $tmate_option}}"
  local data="{\"event_type\": \"$event_type\", \
  \"client_payload\": { \
    \"distroname\": \"$DISTRONAME\", \
    \"iso_profiles_repo\": \"$ISO_PROFILES_REPO\", \
    \"edition\": \"$EDITION\", \
    \"manjaro_branch\": \"$MANJARO_BRANCH\", \
    \"community_branch\": \"$COMMUNITY_BRANCH\", \
    \"biglinux_branch\": \"$BIGLINUX_BRANCH\", \
    \"kernel\": \"$KERNEL\", \
    \"release_tag\": \"$current_datetime\", \
    \"tmate\": $tmate_option \
  }}"

	p_log "${CYAN}" "Disparando workflow para $event_type${NC}"
	response=$(curl -s -X POST \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Authorization: token $TOKEN_RELEASE" \
		--data "$data" \
		-w "%{http_code}" \
		-o /dev/null \
		"https://api.github.com/repos/${REPO}/dispatches")

	if [ "$response" != "204" ]; then
		die "{RED}" "Erro ao acionar o workflow. Código de resposta: $response${NC}"
	fi

	p_log "${GREEN}" "Workflow de build da ISO $event_type acionado com sucesso.${NC}"
	p_log "${YELLOW}" "Por favor, verifique a aba 'Actions' no GitHub para acompanhar o progresso do build.${NC}"
	if [ "$TMATE" == "sim" ]; then
		p_log "${YELLOW}" "A sessão TMATE será ativada. Fique atento às informações de conexão nos logs do GitHub Actions.${NC}"
	fi
	p_log "$orange" "Aguardando '2s' para a API acionar a Action e podermos pegar o 'id'."
	sleep 2
	p_log "$RESET" "$(get_url_actions)"

	checkout_and_exit 0
}

resume_and_build() {
	# Confirmar as escolhas
	echo -e "\n${cyan}Resumo das escolhas:${reset}"
	echo "Distroname       : ${orange}$DISTRONAME ${reset}"
	echo "Iso Profiles repo: ${orange}$ISO_PROFILES_REPO ${reset}"
	echo "Manjaro Branch   : ${orange}$MANJARO_BRANCH ${reset}"
	echo "Community Branch : ${orange}$COMMUNITY_BRANCH ${reset}"
	echo "BigLinux Branch  : ${orange}$BIGLINUX_BRANCH ${reset}"
	echo "Kernel           : ${orange}$KERNEL ${reset}"
	echo "Edition          : ${orange}$EDITION ${reset}"
	echo "Release Tag      : ${orange}$TAG ${reset}"
	echo "TMATE Debug      : ${orange}$TMATE ${reset}"
	echo

	if conf "${YELLOW}Deseja prosseguir com a construção da ISO?"; then
		trigger_workflow
	else
		die "${RED}" "Construção da ISO cancelada."
	fi
}

get_iso_profiles_repo() {
	create_menu \
		'Escolha o repositório iso-profiles:' \
		'https://github.com/talesam/iso-profiles' \
		'https://github.com/chililinux/iso-profiles' \
		'https://gitlab.manjaro.org/profiles-and-settings/iso-profiles.git' \
		'Sair'
	if [[ $MENU_RESULT == "Sair" ]]; then
		die "${red}" "Construção da ISO cancelada.${reset}"
	fi
	ISO_PROFILES_REPO="${MENU_RESULT}"
}

get_distroname() {
	create_menu \
		"Escolha a distribuição:" \
		"bigcommunity" \
		"biglinux" \
		"chililinux" \
		"Sair"
	if [[ $MENU_RESULT == "Sair" ]]; then
		die "${red}" "Construção da ISO cancelada.${reset}"
	fi
	DISTRONAME="${MENU_RESULT}"
}

## main() { Início do script principal }
########################################
# Verificações iniciais

# Cores e estilos
IS_AUTO=false
nocolor=false
set_varcolors
# Loop através de todos os parâmetros ($@)
for arg in "$@"; do
	if [[ "$arg" = @(-n|--nocolor) ]]; then
		nocolor=true
		[[ "$nocolor" == "true" ]] && unset_varcolors || set_varcolors
	elif [[ "$arg" = @(-V|--version) ]]; then
		sh_version
		exit $(($# ? 0 : 1))
	elif [[ "$arg" = @(-h|--help) ]]; then
		sh_usage
		exit $(($# ? 0 : 1))
	elif [[ "$arg" = @(-a|--auto|--automatic) ]]; then
		IS_AUTO=true
    if [[ "$ORGANIZATION" =~ ^(chililinux|vcatafesta)$ ]]; then
   		DISTRONAME=bigcommunity
   		ISO_PROFILES_REPO='https://github.com/talesam/iso-profiles'
   		MANJARO_BRANCH=stable
   		COMMUNITY_BRANCH=testing
   		BIGLINUX_BRANCH=testing
   		KERNEL=latest
   		EDITION=xfce
   		TAG=$(date "+%Y-%m-%d_%H-%M")
   		TMATE=sim
    else
   		DISTRONAME=chililinux
   		ISO_PROFILES_REPO='https://github.com/chililinux/iso-profiles'
   		MANJARO_BRANCH=stable
   		COMMUNITY_BRANCH=testing
   		BIGLINUX_BRANCH=testing
   		KERNEL=latest
   		EDITION=xfce
   		TAG=$(date "+%Y-%m-%d_%H-%M")
   		TMATE=sim
    fi
	fi
done

sh_configure_environment "$@"
p_log "${BLUE}" "${BOLD}Construção de ISO BigCommunity (versão $VERSION)${NC}\n"

if $IS_AUTO; then
	resume_and_build
else
	while true; do
    get_distroname
    get_iso_profiles_repo

		create_menu \
			"Escolha o branch para o Manjaro:" \
			"Stable" \
			"Testing" \
			"Unstable" \
			"Sair"

		if [[ $MENU_RESULT == "Sair" ]]; then
			die "${RED}" "Construção da ISO cancelada.${NC}"
		fi
		MANJARO_BRANCH=${MENU_RESULT,,} # Converte para minúsculas

		create_menu \
			"Escolha o branch para o Community:" \
			"Stable" \
			"Testing" \
			"Voltar"
		if [[ $MENU_RESULT == "Voltar" ]]; then
			continue
		fi
		COMMUNITY_BRANCH=${MENU_RESULT,,}

		create_menu \
			"Escolha o branch para o BigLinux:" \
			"Stable" \
			"Testing" \
			"Voltar"
		if [[ $MENU_RESULT == "Voltar" ]]; then
			continue
		fi
		BIGLINUX_BRANCH=${MENU_RESULT,,}

		create_menu \
			"Escolha a versão do kernel:" \
			"Latest" \
			"LTS" \
			"OldLTS" \
			"Xanmod" \
			"Voltar"
		if [[ $MENU_RESULT == "Voltar" ]]; then
			continue
		fi
		KERNEL=${MENU_RESULT,,}

		create_menu \
			"Escolha a edição:" \
			"Cinnamon" \
			"Cosmic" \
			"Deepin" \
			"Gnome" \
			"KDE" \
			"XFCE" \
			"Wmaker" \
			"Voltar"
		if [[ $MENU_RESULT == "Voltar" ]]; then
			continue
		fi
		EDITION=${MENU_RESULT,,}

		create_menu \
			"Ativar sessão de debug TMATE?" \
			"Não" \
			"Sim" \
			"Voltar"
		if [[ $MENU_RESULT == "Voltar" ]]; then
			continue
		fi
		TMATE=${MENU_RESULT,,}
		TAG=$(date "+%Y-%m-%d_%H-%M")
		resume_and_build
	done
fi
