#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# shellcheck shell=bash disable=SC1091,SC2039,SC2166,SC2317,SC2155,SC2034,SC2229,SC2076,SC2199,SC2015
#
#  build-package - Wrapper git para o BigCommunity
#  Created: qui 05 set 2024 00:51:12 -04
#  Altered: qua 09 out 2024 21:31:59 -04
#
#  Copyright (c) 2024-2024, Tales A. Mendonça <talesam@gmail.com>
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
# system
declare APP="${0##*/}"
declare APPDESC="Wrapper git para o BigCommunity"
declare VERSION="2.1.3" # Versão do script
: "${reset=$(tput sgr0)}"
: "${red=$(tput bold)$(tput setaf 196)}"
LIBRARY=${LIBRARY:-"/usr/share/community/gitrepo/shell"}
[[ -s "$LIBRARY/gitlib.sh" ]] && source "$LIBRARY"/gitlib.sh || {
	echo "${red}=> ERRO FATAL: Não foi possível ler a biblioteca $LIBRARY/gitlib.sh ${reset}"
	exit 1
}

# Função para exibir informações de ajuda
sh_usage() {
	cat <<-EOF
		${reset}${APP} v${VERSION} - ${APPDESC}${reset}
		${red}Uso: ${reset}$APP ${cyan}[opções]${reset}

		    ${cyan}Opções:${reset}
		      -o|--org|--organization ${orange}<name> ${cyan} # Configura organização de trabalho no Github ${yellow}(default: communitybig)${reset}
		      -c|--commit          ${orange}<message> ${cyan} # Apenas fazer commit/push ${yellow}obrigátorio mensagem do commit ${reset}
		      -b|--build            ${orange}<branch> ${cyan} # Realizar commit/push e gerar pacote ${reset} branch válidos: ${yellow}testing, stable ${cyan}ou ${yellow}extra ${reset}
		      -a|--aur              ${orange}<pacote> ${cyan} # Construir pacote do AUR ${yellow}obrigátorio nome do pacote para construir ${reset}
		      -n|--nocolor                   ${cyan} # Suprime a impressão de cores ${reset}
		      -V|--version                   ${cyan} # Imprime a versão do aplicativo ${reset}
		      -h|--help                      ${cyan} # Mostra este Help ${reset}
	EOF
}

check_param_commit() {
	local value_commit="$1"
	if [[ -z "$value_commit" || "$value_commit" == -* ]]; then
		die "$RED" "Erro fatal: Valor inválido para o parâmetro ${YELLOW}'-c|--commit' ${RESET}
${INFO}O valor do parâmetro está vazio ou é outro/ou próximo parâmetro.
São válidos: Qualquer string não vazia"
	fi
}

check_param_build() {
	local value_build="$1"
	if [[ ! " ${branchs[@]} " =~ " $value_build " ]]; then
		die "$RED" "Erro fatal: Valor inválido para o parâmetro ${YELLOW}'-b|--build' ${RESET};
${INFO}São válidos: ${branchs[*]}"
	fi
}

parse_parameters() {
	local param_organization
	local value_organization
	local param_organization_was_supplied=false
	local param_commit_was_supplied=false
	local param_build_was_supplied=false
	local param_aur_was_supplied=false

	while [[ $# -gt 0 ]]; do
		case $1 in
		-n | --nocolor)
			unset_varcolors
			shift # past argument
			;;
		-o | --org | --organization)
			param_organization="$1"
			value_organization="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_org "$value_organization"
			param_organization_was_supplied=true
			shift # past value
			;;
		-c | --commit)
			param_commit="$1"
			value_commit="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_commit "$value_commit"
			param_commit_was_supplied=true
			shift # past argument
			shift # past value
			;;
		-b | --build)
			param_build="$1"
			value_build="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_build "$value_build"
			param_build_was_supplied=true
			shift # past argument
			shift # past value
			;;
		-a | --aur)
			param_aur="$1"
			value_aur="$2"
			# Teste se o parâmetro foi fornecido e se o valor é válido
			check_param_aur "$value_aur"
			param_aur_was_supplied=true
			shift # past argument
			shift # past value
			;;
		*)
			shift # unknown option
			;;
		esac
	done

	if $param_organization_was_supplied; then
		REPO="${value_organization}/build-package" # Repositório que contém os workflows
		ORGANIZATION="${REPO%%/*}"                 # communitybig
	fi

	get_token_release # Obtem o TOKEN_RELEASE utilizando a função get_token_release
	check_valid_token

	if $param_build_was_supplied; then
		branch_type="$value_build"
		if $param_commit_was_supplied; then
			default_commit_message="$value_commit"
		else
			die "$RED" "Erro fatal: Valor inválido para o parâmetro ${YELLOW}'-c|--commit' ${RESET}
Ao usar o parametro ${YELLOW}'-b|--build' ${reset}é necessário também este parâmetro"
		fi
		Realizar_commit_e_gerar_pacote
	fi

	if $param_commit_was_supplied; then
		default_commit_message="$value_commit"
		Apenas_fazer_commit_push
	fi

	if $param_aur_was_supplied; then
		Construir_pacote_do_AUR "$value_aur"
		checkout_and_exit 0
	fi
}

sh_version() {
	cat <<-EOF
		    ${BOLD}${CYAN}${0##*/} v${VERSION}${RESET}
		    ${APPDESC}
		    ${BOLD}${black}Copyright (C) 2024-2024 ${reset}BigCommunity Team${black}

				    Este é um software livre: você é livre para alterá-lo e redistribuí-lo.
				    O $APP é disponibilizado para você sob a ${yellow}Licença MIT${black}, e
				    inclui software de código aberto sob uma variedade de outras licenças.
				    Você pode ler instruções sobre como baixar e criar para você mesmo
				    o código fonte específico usado para criar esta cópia.
				    ${red}Este programa vem com absolutamente NENHUMA garantia.
				    ${RESET}
	EOF
}

trigger_workflow() {
	local package_name="$1"
	local branch_type="$2"
	local aur_package="$3"
	local data
	local event_type
	local response
	local repo_name
	local tmate_option="false"

	p_log "$CYAN" "Acionando o workflow de build no GitHub..."
	if [[ -n "$aur_package" ]]; then
		aur_url="https://aur.archlinux.org/${package_name}.git"
#		data="{\"event_type\": \"aur-$package_name\", \"client_payload\": { \"package_name\": \"${package_name}\", \"aur_url\": \"${aur_url}\", \"branch_type\": \"aur\", \"build_env\": \"aur\", \"tmate\": $tmate_option}}"
    data="{\
      \"event_type\": \"aur-$package_name\", \
      \"client_payload\": { \
      \"package_name\": \"${package_name}\", \
      \"aur_url\": \"${aur_url}\", \
      \"branch_type\": \"aur\", \
      \"build_env\": \"aur\", \
      \"tmate\": $tmate_option \
      }\
    }"
		event_type="aur-build"
	else
		repo_name=$(git config --get remote.origin.url | sed 's/.*[:/]\([^/]*\/[^.]*\).*/\1/')
		if [[ -z "$repo_name" ]]; then
			die "$RED" "Deu ruim na recuperação da URL do repositório remoto do pacote: $package_name"
		fi
		p_log "$CYAN" "Repositório detectado: $repo_name"
#		data="{\"event_type\": \"$package_name\", \"client_payload\": { \"branch\": \"${new_branch}\", \"type\": \"${branch_type}\", \"url\": \"https://github.com/${repo_name}\"}}"
    data="{\
      \"event_type\": \"$package_name\", \
      \"client_payload\": { \
      \"branch\": \"${new_branch}\", \
      \"branch_type\": \"${branch_type}\", \
      \"url\": \"https://github.com/${repo_name}\" \
      }\
    }"
		event_type="package-build"
	fi

	response=$(curl -s -X POST \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Authorization: token $TOKEN_RELEASE" \
		--data "$data" \
		-w "%{http_code}" \
		-o /dev/null \
		"https://api.github.com/repos/${REPO}/dispatches")

	if [[ "$response" != "204" ]]; then
		die "$RED" "Erro '$response' ao acionar o workflow. Código de resposta: $response"
	fi

	p_log "$GREEN" "Workflow de build ($event_type) acionado com sucesso. Código de resposta: $response"
	p_log "$YELLOW" "Por favor, verifique a aba 'Actions' no GitHub para acompanhar o progresso do build."
	p_log "$orange" "Aguardando '2s' para a API acionar a Action e podermos pegar o 'id'."
	sleep 2
	p_log "$RESET" "$(get_url_actions)"
}

sh_configure_environment() {
	#debug
	export PS4='${RED}${0##*/}${GREEN}[$FUNCNAME]${PURPLE}[$LINENO]${RESET}'
	#set -x
	#set -e

	declare -g REPO="communitybig/build-package" # Repositório que contém os workflows
	declare -g ORGANIZATION="${REPO%%/*}"        # communitybig
	declare -g CFILETOKEN="$HOME/.GITHUB_TOKEN"  # path do arquivo que contem os tokens do github

	declare -g REPO_NAME="$(get_repo_name)"      # Obtém o nome do repositório utilizando a função get_repo_name
	declare -g REPO_PATH="$(get_repo_root_path)" # Obtém o caminho raiz do repositório utilizando a função get_repo_root_path

	# Define o diretório de log, armazenando os logs temporários do repositório
	declare -g LOG_DIR="/tmp/${APP}/${REPO_NAME}"
	declare -g LOG_FILE="${LOG_DIR}/${APP}.log"
	[[ ! -d "$LOG_DIR" ]] && mkdir -p "$LOG_DIR"

	p_log "$BLUE" "Configurando ambiente"
	declare -g IS_GIT_REPO="$(check_repo_is_git)"
	declare -g IS_AUR_PACKAGE=false

	checkDependencies
	parse_parameters "$@"
}

Apenas_fazer_commit_push() {
	if $IS_GIT_REPO; then
		update_commit_push
	else
		die "$RED" "Esta opção só está disponível em repositórios git."
	fi
	checkout_and_exit 0
}

Realizar_commit_e_gerar_pacote() {
	update_commit_push
	create_branch_and_push "$branch_type"
	package_name=$(get_package_name)
	trigger_workflow "$package_name" "$branch_type"
}

Construir_pacote_do_AUR() {
	local aur_package_name="$1"

	IS_AUR_PACKAGE=true

	# Verifica se existe um arquivo PKGBUILD
	if ! $IS_AUR_PACKAGE; then
		PKGBUILD_PATH=$(find "$REPO_PATH" -name PKGBUILD -print -quit)
		if [[ -z "$PKGBUILD_PATH" ]]; then
			die "$RED" "Erro: Nenhum arquivo PKGBUILD foi encontrado no diretório atual ou subdiretórios."
		else
			p_log "$GREEN" "Arquivo PKGBUILD encontrado em: $PKGBUILD_PATH"
			cd "$(dirname "$PKGBUILD_PATH")" || die "$RED" "Erro: não consegui entrar em $PKGBUILD_PATH"
		fi
	fi

	if [[ -z "$aur_package_name" ]]; then
		while true; do
			p_log "$PURPLE" "Digite o nome do pacote AUR (ex: showtime): digite ${YELLOW}SAIR ${PURPLE}para sair"
			read -r aur_package_name
			if [[ "${aur_package_name^^}" == "SAIR" ]]; then
				die "$YELLOW" "Saindo do script. Nenhuma ação foi realizada."
			elif [[ -z "$aur_package_name" ]]; then
				p_log "$RED" "Erro: Nenhum nome de pacote foi inserido."
				continue
			fi
			break
		done
	fi

	if $IS_GIT_REPO; then
		create_branch_and_push "aur"
	fi
	trigger_workflow "$aur_package_name" "aur" "true"
}

menu_advanced() {
	while true; do
		# Menu principal
		if $IS_GIT_REPO; then
			create_menu "Escolha uma ação:" \
		    "Excluir todos os branchs locais e remoto (exceto main, e os últimos testing, stable e extra)" \
				"Excluir todos os Action jobs com falhas no remoto  : $(get_organization_repo_name)" \
				"Excluir todos os Action jobs com sucesso no remoto : $(get_organization_repo_name)" \
				"Apagar todas a tags no remoto : $(get_organization_repo_name)" \
				"Voltar"
		fi
		ACTION=$MENU_RESULT
		case "$ACTION" in
		"Excluir todos os branchs locais e remoto (exceto main, e os últimos testing, stable e extra)")
			gclean_branch_remote_and_update_local
			;;
		"Excluir todos os Action jobs com falhas no remoto  : $(get_organization_repo_name)")
			clean_failures_action_jobs_on_remote
			#delete_failed_runs
			;;
		"Excluir todos os Action jobs com sucesso no remoto : $(get_organization_repo_name)")
			clean_success_action_jobs_on_remote
			;;
		"Apagar todas a tags no remoto : $(get_organization_repo_name)")
			clean_all_tags_on_remote
			;;
		"Voltar")
			p_log "$YELLOW" "Saindo do script. Nenhuma ação foi realizada."
			return
			;;
		*)
			die "$RED" "Opção inválida selecionada."
			;;
		esac
	done
}

## main() { Início do script principal }
########################################
# Verificações iniciais

# Cores e estilos
nocolor=false
set_varcolors
# Loop através de todos os parâmetros ($@)
for arg in "$@"; do
	if [[ "$arg" = @(-n|--nocolor) ]]; then
		nocolor=true
		[[ "$nocolor" == "true" ]] && unset_varcolors || set_varcolors
	elif [[ "$arg" = @(-V|--version) ]]; then
		sh_version
		exit $(($# ? 0 : 1))
	elif [[ "$arg" = @(-h|--help) ]]; then
		sh_usage
		exit $(($# ? 0 : 1))
	fi
done

sh_configure_environment "$@"
p_log "$BLUE" "Iniciando processo de gerenciamento de repositório (v${VERSION})"

while true; do
	# Menu principal
	if $IS_GIT_REPO; then
		create_menu "Escolha uma ação:" \
			"Apenas fazer commit/push" \
			"Realizar commit e gerar pacote" \
			"Construir pacote do AUR" \
			"Avançado" \
			"Sair"
	else
		create_menu "Escolha uma ação:" \
			"Construir pacote do AUR" \
			"Sair"
	fi
	ACTION=$MENU_RESULT

	case "$ACTION" in
	"Apenas fazer commit/push")
		Apenas_fazer_commit_push
		;;
	"Realizar commit e gerar pacote")
		if $IS_GIT_REPO; then
			create_menu "Selecione o repositório:" \
				"testing" \
				"stable" \
				"extra" \
				"Voltar"
			if [[ $MENU_RESULT == "Voltar" ]]; then
				continue
			fi
			branch_type=$MENU_RESULT
			Realizar_commit_e_gerar_pacote
			break
		else
			die "$RED" "Esta opção só está disponível em repositórios git."
		fi
		;;
	"Construir pacote do AUR")
		Construir_pacote_do_AUR
		break
		;;
	"Avançado")
		menu_advanced
		;;
	"Sair")
		p_log "$YELLOW" "Saindo do script. Nenhuma ação foi realizada."
		checkout_and_exit 1
		;;
	*)
		die "$RED" "Opção inválida selecionada."
		;;
	esac
done

checkout_and_exit 0
